
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 18 17:13:36 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 18 17:13:36 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\010" +
    "\000\002\002\010\000\002\002\007\000\002\002\010\000" +
    "\002\002\005\000\002\002\004\000\002\002\005\000\002" +
    "\002\006\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\005\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\007\000\002" +
    "\004\005\000\002\004\012\000\002\004\011\000\002\006" +
    "\011\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\005\000\002\013\007\000" +
    "\002\013\007\000\002\013\005\000\002\007\015\000\002" +
    "\010\011\000\002\011\013\000\002\012\011\000\002\014" +
    "\012\000\002\014\011\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\015\007\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\016\006\000\002\016\005\000\002\016\007\000\002\016" +
    "\007\000\002\016\005\000\002\016\007\000\002\016\011" +
    "\000\002\016\006\000\002\016\010\000\002\016\007\000" +
    "\002\016\007\000\002\016\007\000\002\016\010\000\002" +
    "\016\003\000\002\033\004\000\002\033\010\000\002\033" +
    "\007\000\002\033\007\000\002\036\005\000\002\020\004" +
    "\000\002\020\006\000\002\024\005\000\002\021\006\000" +
    "\002\021\005\000\002\021\006\000\002\021\006\000\002" +
    "\021\011\000\002\021\012\000\002\023\005\000\002\023" +
    "\006\000\002\023\006\000\002\023\004\000\002\023\005" +
    "\000\002\023\005\000\002\022\003\000\002\022\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\027\005" +
    "\000\002\027\007\000\002\027\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\030\007\000\002\032\007\000" +
    "\002\032\006\000\002\032\006\000\002\032\005\000\002" +
    "\032\012\000\002\035\010\000\002\035\010\000\002\035" +
    "\010\000\002\035\010\000\002\035\004\000\002\034\006" +
    "\000\002\034\004\000\002\034\004\000\002\026\005\000" +
    "\002\026\011\000\002\026\004\000\002\026\007\000\002" +
    "\026\010\000\002\026\013\000\002\026\006\000\002\026" +
    "\010\000\002\026\010\000\002\026\012\000\002\026\006" +
    "\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\016\005\010\026\005\027\014\033\011\035" +
    "\012\041\015\001\002\000\004\026\u01fe\001\002\000\006" +
    "\027\u01d3\034\u0182\001\002\000\012\005\u01f6\026\u01d2\033" +
    "\u01f5\041\u01ce\001\002\000\004\002\u01f4\001\002\000\006" +
    "\033\u01f0\035\u01c5\001\002\000\004\025\u01ed\001\002\000" +
    "\006\025\u01ec\040\243\001\002\000\004\033\u01e8\001\002" +
    "\000\056\005\030\006\025\010\051\011\037\012\044\013" +
    "\064\014\063\015\060\022\050\023\061\025\043\026\042" +
    "\030\u01c8\032\035\035\057\036\062\037\040\041\027\042" +
    "\u01ca\045\046\046\033\052\034\001\002\000\004\035\u01c1" +
    "\001\002\000\004\026\020\001\002\000\014\002\uff85\005" +
    "\uff85\026\uff85\033\uff85\041\uff85\001\002\000\006\027\021" +
    "\034\022\001\002\000\052\005\030\006\025\010\051\011" +
    "\037\012\044\013\064\014\063\015\060\022\050\023\061" +
    "\025\043\026\042\032\035\035\057\036\062\037\040\041" +
    "\027\045\046\046\033\052\034\001\002\000\060\005\uff86" +
    "\006\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\022\uff86\023\uff86\025\uff86\026\uff86\030\uff86\032\uff86" +
    "\033\uff86\035\uff86\036\uff86\037\uff86\041\uff86\042\uff86\045" +
    "\uff86\046\uff86\052\uff86\001\002\000\056\005\uffef\006\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\022" +
    "\uffef\023\uffef\025\uffef\026\uffef\030\uffef\032\uffef\035\uffef" +
    "\036\uffef\037\uffef\041\uffef\042\uffef\045\uffef\046\uffef\052" +
    "\uffef\001\002\000\004\026\u01c0\001\002\000\004\025\u01b6" +
    "\001\002\000\056\005\uffdf\006\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\022\uffdf\023\uffdf\025\uffdf" +
    "\026\uffdf\030\uffdf\032\uffdf\035\uffdf\036\uffdf\037\uffdf\041" +
    "\uffdf\042\uffdf\045\uffdf\046\uffdf\052\uffdf\001\002\000\004" +
    "\035\u01b3\001\002\000\014\005\316\014\314\015\313\031" +
    "\u01a1\035\u01a2\001\002\000\052\005\030\006\025\010\051" +
    "\011\037\012\044\013\064\014\063\015\060\022\050\023" +
    "\061\025\043\026\042\032\035\035\057\036\062\037\040" +
    "\041\027\042\u019d\045\046\046\033\001\002\000\056\005" +
    "\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9\030\uffe9\032" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\045\uffe9" +
    "\046\uffe9\052\uffe9\001\002\000\004\025\u019a\001\002\000" +
    "\004\034\u0199\001\002\000\010\013\u018f\031\u018e\034\u018d" +
    "\001\002\000\056\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\022\uffeb\023\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\032\uffeb\035\uffeb\036\uffeb\037\uffeb\041" +
    "\uffeb\042\uffeb\045\uffeb\046\uffeb\052\uffeb\001\002\000\004" +
    "\025\u0187\001\002\000\004\025\u0183\001\002\000\056\005" +
    "\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\030\ufff1\032" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1\045\ufff1" +
    "\046\ufff1\052\ufff1\001\002\000\004\034\u0182\001\002\000" +
    "\014\014\333\015\372\026\277\036\331\043\300\001\002" +
    "\000\004\025\u0167\001\002\000\056\005\uffe7\006\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\022\uffe7" +
    "\023\uffe7\025\uffe7\026\uffe7\030\uffe7\032\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\052\uffe7" +
    "\001\002\000\004\025\u014f\001\002\000\056\005\uffdc\006" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\022\uffdc\023\uffdc\025\uffdc\026\uffdc\030\uffdc\032\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\045\uffdc\046\uffdc" +
    "\052\uffdc\001\002\000\014\035\u0102\036\u014e\043\u0103\044" +
    "\u0100\051\113\001\002\000\004\027\u0135\001\002\000\056" +
    "\005\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3\030\ufff3" +
    "\032\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3\045" +
    "\ufff3\046\ufff3\052\ufff3\001\002\000\056\005\uff9a\006\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\022" +
    "\uff9a\023\uff9a\025\uff9a\026\uff9a\030\uff9a\032\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\041\uff9a\042\uff9a\045\uff9a\046\uff9a\052" +
    "\uff9a\001\002\000\056\005\uffe3\006\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\041\uffe3\042\uffe3\045\uffe3\046\uffe3\052\uffe3\001\002\000" +
    "\052\005\030\006\025\010\051\011\037\012\044\013\064" +
    "\014\063\015\060\022\050\023\061\025\043\026\042\032" +
    "\035\035\057\036\062\037\040\041\027\045\046\046\033" +
    "\052\034\001\002\000\056\005\uffed\006\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\022\uffed\023\uffed" +
    "\025\uffed\026\uffed\030\uffed\032\uffed\035\uffed\036\uffed\037" +
    "\uffed\041\uffed\042\uffed\045\uffed\046\uffed\052\uffed\001\002" +
    "\000\040\005\244\013\247\014\114\015\117\016\105\017" +
    "\107\022\246\023\061\025\237\035\242\036\116\040\243" +
    "\046\245\050\102\051\113\001\002\000\006\035\230\050" +
    "\102\001\002\000\006\034\224\035\225\001\002\000\026" +
    "\014\114\015\117\016\105\017\107\025\110\032\163\035" +
    "\115\036\116\050\102\051\113\001\002\000\006\035\103" +
    "\050\102\001\002\000\014\024\071\035\072\036\067\043" +
    "\073\044\070\001\002\000\056\005\uffe5\006\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\022\uffe5\023" +
    "\uffe5\025\uffe5\026\uffe5\030\uffe5\032\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\052\uffe5\001" +
    "\002\000\056\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\022\uffe1\023\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1" +
    "\042\uffe1\045\uffe1\046\uffe1\052\uffe1\001\002\000\004\034" +
    "\100\001\002\000\004\034\077\001\002\000\004\034\076" +
    "\001\002\000\004\034\075\001\002\000\004\034\074\001" +
    "\002\000\056\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\022\uffd3\023\uffd3\025\uffd3\026" +
    "\uffd3\030\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\045\uffd3\046\uffd3\052\uffd3\001\002\000\056\005" +
    "\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0\032" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0" +
    "\046\uffd0\052\uffd0\001\002\000\056\005\uffce\006\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\022\uffce" +
    "\023\uffce\025\uffce\026\uffce\030\uffce\032\uffce\035\uffce\036" +
    "\uffce\037\uffce\041\uffce\042\uffce\045\uffce\046\uffce\052\uffce" +
    "\001\002\000\056\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\022\uffd1\023\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\032\uffd1\035\uffd1\036\uffd1\037\uffd1\041" +
    "\uffd1\042\uffd1\045\uffd1\046\uffd1\052\uffd1\001\002\000\056" +
    "\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\030\uffd7" +
    "\032\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\045" +
    "\uffd7\046\uffd7\052\uffd7\001\002\000\010\017\160\026\141" +
    "\034\143\001\002\000\004\025\155\001\002\000\024\014" +
    "\114\015\117\016\105\017\107\025\110\035\115\036\116" +
    "\050\102\051\113\001\002\000\026\014\114\015\117\016" +
    "\105\017\107\025\110\034\154\035\115\036\116\050\102" +
    "\051\113\001\002\000\030\014\114\015\117\016\105\017" +
    "\107\025\110\026\uffb7\034\uffb7\035\115\036\116\050\102" +
    "\051\113\001\002\000\004\026\150\001\002\000\030\014" +
    "\114\015\117\016\105\017\107\025\110\026\uffb5\034\uffb5" +
    "\035\115\036\116\050\102\051\113\001\002\000\024\014" +
    "\114\015\117\016\105\017\107\025\110\035\115\036\116" +
    "\050\102\051\113\001\002\000\030\014\114\015\117\016" +
    "\105\017\107\025\110\026\uffa8\034\uffa8\035\115\036\116" +
    "\050\102\051\113\001\002\000\030\014\114\015\117\016" +
    "\105\017\107\025\110\026\141\034\143\035\115\036\116" +
    "\050\102\051\113\001\002\000\004\025\124\001\002\000" +
    "\030\014\114\015\117\016\105\017\107\025\110\026\uffb6" +
    "\034\uffb6\035\115\036\116\050\102\051\113\001\002\000" +
    "\030\014\114\015\117\016\105\017\107\025\110\026\uffad" +
    "\034\uffad\035\115\036\116\050\102\051\113\001\002\000" +
    "\030\014\114\015\117\016\105\017\107\025\110\026\uffac" +
    "\034\uffac\035\115\036\116\050\102\051\113\001\002\000" +
    "\030\014\114\015\117\016\105\017\107\025\110\026\uffb4" +
    "\034\uffb4\035\115\036\116\050\102\051\113\001\002\000" +
    "\006\026\uffb2\034\uffb2\001\002\000\006\026\uffaf\034\uffaf" +
    "\001\002\000\006\026\uffae\034\uffae\001\002\000\006\026" +
    "\uffb3\034\uffb3\001\002\000\006\035\126\036\125\001\002" +
    "\000\004\040\134\001\002\000\004\040\127\001\002\000" +
    "\006\035\131\036\130\001\002\000\004\026\133\001\002" +
    "\000\004\026\132\001\002\000\026\014\uff62\015\uff62\016" +
    "\uff62\017\uff62\025\uff62\034\uff62\035\uff62\036\uff62\050\uff62" +
    "\051\uff62\001\002\000\026\014\uff64\015\uff64\016\uff64\017" +
    "\uff64\025\uff64\034\uff64\035\uff64\036\uff64\050\uff64\051\uff64" +
    "\001\002\000\006\035\136\036\135\001\002\000\004\026" +
    "\140\001\002\000\004\026\137\001\002\000\026\014\uff63" +
    "\015\uff63\016\uff63\017\uff63\025\uff63\034\uff63\035\uff63\036" +
    "\uff63\050\uff63\051\uff63\001\002\000\026\014\uff65\015\uff65" +
    "\016\uff65\017\uff65\025\uff65\034\uff65\035\uff65\036\uff65\050" +
    "\uff65\051\uff65\001\002\000\030\014\uff5e\015\uff5e\016\uff5e" +
    "\017\uff5e\025\uff5e\026\uff5e\034\uff5e\035\uff5e\036\uff5e\050" +
    "\uff5e\051\uff5e\001\002\000\006\026\uffaa\034\uffaa\001\002" +
    "\000\030\014\uff5f\015\uff5f\016\uff5f\017\uff5f\025\uff5f\026" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\050\uff5f\051\uff5f\001\002" +
    "\000\006\026\uffa9\034\uffa9\001\002\000\004\026\146\001" +
    "\002\000\030\014\uff95\015\uff95\016\uff95\017\uff95\025\uff95" +
    "\026\uff95\034\uff95\035\uff95\036\uff95\050\uff95\051\uff95\001" +
    "\002\000\006\026\uffb0\034\uffb0\001\002\000\004\034\151" +
    "\001\002\000\056\005\uff9c\006\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\022\uff9c\023\uff9c\025\uff9c" +
    "\026\uff9c\030\uff9c\032\uff9c\035\uff9c\036\uff9c\037\uff9c\041" +
    "\uff9c\042\uff9c\045\uff9c\046\uff9c\052\uff9c\001\002\000\006" +
    "\026\uffb1\034\uffb1\001\002\000\006\026\uffab\034\uffab\001" +
    "\002\000\026\014\uff61\015\uff61\016\uff61\017\uff61\025\uff61" +
    "\034\uff61\035\uff61\036\uff61\050\uff61\051\uff61\001\002\000" +
    "\024\014\114\015\117\016\105\017\107\025\110\035\115" +
    "\036\116\050\102\051\113\001\002\000\004\026\157\001" +
    "\002\000\030\014\uff60\015\uff60\016\uff60\017\uff60\025\uff60" +
    "\026\uff60\034\uff60\035\uff60\036\uff60\050\uff60\051\uff60\001" +
    "\002\000\004\025\110\001\002\000\004\034\162\001\002" +
    "\000\056\005\uff97\006\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\022\uff97\023\uff97\025\uff97\026\uff97" +
    "\030\uff97\032\uff97\035\uff97\036\uff97\037\uff97\041\uff97\042" +
    "\uff97\045\uff97\046\uff97\052\uff97\001\002\000\010\013\170" +
    "\031\167\034\166\001\002\000\004\034\165\001\002\000" +
    "\056\005\uffa6\006\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\030" +
    "\uffa6\032\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6" +
    "\045\uffa6\046\uffa6\052\uffa6\001\002\000\056\005\uff5d\006" +
    "\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d" +
    "\022\uff5d\023\uff5d\025\uff5d\026\uff5d\030\uff5d\032\uff5d\035" +
    "\uff5d\036\uff5d\037\uff5d\041\uff5d\042\uff5d\045\uff5d\046\uff5d" +
    "\052\uff5d\001\002\000\004\036\207\001\002\000\004\027" +
    "\171\001\002\000\014\035\176\036\172\040\175\043\177" +
    "\044\173\001\002\000\016\030\uff83\035\176\036\172\040" +
    "\175\043\177\044\173\001\002\000\016\030\uff81\035\176" +
    "\036\172\040\175\043\177\044\173\001\002\000\004\030" +
    "\203\001\002\000\014\035\176\036\172\040\175\043\177" +
    "\044\173\001\002\000\016\030\uff80\035\176\036\172\040" +
    "\175\043\177\044\173\001\002\000\016\030\uff82\035\176" +
    "\036\172\040\175\043\177\044\173\001\002\000\004\030" +
    "\uff7e\001\002\000\004\030\uff7c\001\002\000\004\030\uff7b" +
    "\001\002\000\004\034\204\001\002\000\056\005\uff5c\006" +
    "\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c" +
    "\022\uff5c\023\uff5c\025\uff5c\026\uff5c\030\uff5c\032\uff5c\035" +
    "\uff5c\036\uff5c\037\uff5c\041\uff5c\042\uff5c\045\uff5c\046\uff5c" +
    "\052\uff5c\001\002\000\004\030\uff7d\001\002\000\004\030" +
    "\uff7f\001\002\000\004\032\210\001\002\000\006\013\212" +
    "\034\211\001\002\000\056\005\uff56\006\uff56\010\uff56\011" +
    "\uff56\012\uff56\013\uff56\014\uff56\015\uff56\022\uff56\023\uff56" +
    "\025\uff56\026\uff56\030\uff56\032\uff56\035\uff56\036\uff56\037" +
    "\uff56\041\uff56\042\uff56\045\uff56\046\uff56\052\uff56\001\002" +
    "\000\004\027\214\001\002\000\004\034\223\001\002\000" +
    "\016\027\214\035\176\036\172\040\175\043\177\044\173" +
    "\001\002\000\004\030\222\001\002\000\004\030\217\001" +
    "\002\000\010\030\uff7a\034\uff7a\040\220\001\002\000\004" +
    "\027\214\001\002\000\006\030\uff79\034\uff79\001\002\000" +
    "\006\030\uff78\034\uff78\001\002\000\056\005\uff54\006\uff54" +
    "\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\022" +
    "\uff54\023\uff54\025\uff54\026\uff54\030\uff54\032\uff54\035\uff54" +
    "\036\uff54\037\uff54\041\uff54\042\uff54\045\uff54\046\uff54\052" +
    "\uff54\001\002\000\056\005\uffd6\006\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\026\uffd6\030\uffd6\032\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\041\uffd6\042\uffd6\045\uffd6\046\uffd6\052\uffd6\001\002\000" +
    "\004\034\226\001\002\000\056\005\uffd5\006\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\032\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\052\uffd5\001" +
    "\002\000\010\017\234\026\141\034\143\001\002\000\024" +
    "\014\114\015\117\016\105\017\107\025\110\035\115\036" +
    "\116\050\102\051\113\001\002\000\004\026\232\001\002" +
    "\000\004\034\233\001\002\000\056\005\uff9d\006\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\022\uff9d" +
    "\023\uff9d\025\uff9d\026\uff9d\030\uff9d\032\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\052\uff9d" +
    "\001\002\000\004\025\110\001\002\000\004\034\236\001" +
    "\002\000\056\005\uff96\006\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\022\uff96\023\uff96\025\uff96\026" +
    "\uff96\030\uff96\032\uff96\035\uff96\036\uff96\037\uff96\041\uff96" +
    "\042\uff96\045\uff96\046\uff96\052\uff96\001\002\000\032\005" +
    "\u011f\014\114\015\117\016\105\017\107\025\110\026\042" +
    "\035\u011e\036\116\041\027\050\102\051\113\001\002\000" +
    "\056\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\030" +
    "\uffd9\032\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9" +
    "\045\uffd9\046\uffd9\052\uffd9\001\002\000\004\034\u011c\001" +
    "\002\000\040\005\244\013\064\014\114\015\117\016\105" +
    "\017\107\022\050\023\061\025\110\034\uffad\035\242\036" +
    "\116\046\245\050\102\051\113\001\002\000\004\035\u011b" +
    "\001\002\000\004\035\u0116\001\002\000\004\025\u0110\001" +
    "\002\000\014\035\u0102\036\377\043\u0103\044\u0100\051\113" +
    "\001\002\000\020\024\071\025\251\035\253\036\250\043" +
    "\073\044\070\046\252\001\002\000\026\014\114\015\117" +
    "\016\105\017\107\025\110\034\100\035\115\036\116\050" +
    "\102\051\113\001\002\000\016\005\310\014\063\015\306" +
    "\025\305\035\307\036\304\001\002\000\012\005\262\025" +
    "\256\035\261\046\260\001\002\000\026\014\114\015\117" +
    "\016\105\017\107\025\110\034\075\035\115\036\116\050" +
    "\102\051\113\001\002\000\004\034\255\001\002\000\056" +
    "\005\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\030\uffa2" +
    "\032\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\045" +
    "\uffa2\046\uffa2\052\uffa2\001\002\000\006\026\277\043\300" +
    "\001\002\000\056\005\uff69\006\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\uff69\015\uff69\022\uff69\023\uff69\025\uff69" +
    "\026\uff69\030\uff69\032\uff69\035\uff69\036\uff69\037\uff69\041" +
    "\uff69\042\uff69\045\uff69\046\uff69\052\uff69\001\002\000\004" +
    "\025\270\001\002\000\004\013\267\001\002\000\004\035" +
    "\263\001\002\000\004\013\264\001\002\000\004\046\265" +
    "\001\002\000\012\005\262\025\256\035\261\046\260\001" +
    "\002\000\056\005\uff6a\006\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\022\uff6a\023\uff6a\025\uff6a\026" +
    "\uff6a\030\uff6a\032\uff6a\035\uff6a\036\uff6a\037\uff6a\041\uff6a" +
    "\042\uff6a\045\uff6a\046\uff6a\052\uff6a\001\002\000\004\046" +
    "\252\001\002\000\004\043\271\001\002\000\004\040\272" +
    "\001\002\000\004\020\273\001\002\000\004\035\274\001" +
    "\002\000\004\026\275\001\002\000\004\034\276\001\002" +
    "\000\056\005\uff66\006\uff66\010\uff66\011\uff66\012\uff66\013" +
    "\uff66\014\uff66\015\uff66\022\uff66\023\uff66\025\uff66\026\uff66" +
    "\030\uff66\032\uff66\035\uff66\036\uff66\037\uff66\041\uff66\042" +
    "\uff66\045\uff66\046\uff66\052\uff66\001\002\000\004\034\303" +
    "\001\002\000\004\026\301\001\002\000\004\034\302\001" +
    "\002\000\056\005\uff68\006\uff68\010\uff68\011\uff68\012\uff68" +
    "\013\uff68\014\uff68\015\uff68\022\uff68\023\uff68\025\uff68\026" +
    "\uff68\030\uff68\032\uff68\035\uff68\036\uff68\037\uff68\041\uff68" +
    "\042\uff68\045\uff68\046\uff68\052\uff68\001\002\000\056\005" +
    "\uff67\006\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67" +
    "\015\uff67\022\uff67\023\uff67\025\uff67\026\uff67\030\uff67\032" +
    "\uff67\035\uff67\036\uff67\037\uff67\041\uff67\042\uff67\045\uff67" +
    "\046\uff67\052\uff67\001\002\000\026\014\114\015\117\016" +
    "\105\017\107\025\110\026\374\035\115\036\116\050\102" +
    "\051\113\001\002\000\010\014\333\015\372\036\331\001" +
    "\002\000\006\035\371\050\102\001\002\000\030\013\361" +
    "\014\114\015\117\016\105\017\107\022\360\025\110\035" +
    "\115\036\116\050\102\051\113\001\002\000\012\005\316" +
    "\014\314\015\313\035\315\001\002\000\056\005\uffa0\006" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\022\uffa0\023\uffa0\025\uffa0\026\uffa0\030\uffa0\032\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\045\uffa0\046\uffa0" +
    "\052\uffa0\001\002\000\056\005\uff99\006\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\022\uff99\023\uff99" +
    "\025\uff99\026\uff99\030\uff99\032\uff99\035\uff99\036\uff99\037" +
    "\uff99\041\uff99\042\uff99\045\uff99\046\uff99\052\uff99\001\002" +
    "\000\004\050\102\001\002\000\004\050\102\001\002\000" +
    "\004\013\325\001\002\000\012\005\316\014\314\015\313" +
    "\035\317\001\002\000\004\013\320\001\002\000\004\025" +
    "\321\001\002\000\004\015\322\001\002\000\004\035\323" +
    "\001\002\000\012\005\316\014\314\015\313\035\317\001" +
    "\002\000\056\005\uff98\006\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\022\uff98\023\uff98\025\uff98\026" +
    "\uff98\030\uff98\032\uff98\035\uff98\036\uff98\037\uff98\041\uff98" +
    "\042\uff98\045\uff98\046\uff98\052\uff98\001\002\000\016\005" +
    "\310\014\063\015\060\025\327\035\307\036\326\001\002" +
    "\000\024\014\114\015\117\016\105\017\107\025\110\035" +
    "\115\036\116\050\102\051\113\001\002\000\010\014\333" +
    "\015\332\036\331\001\002\000\056\005\uffa7\006\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\026\uffa7\030\uffa7\032\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\041\uffa7\042\uffa7\045\uffa7\046\uffa7\052\uffa7" +
    "\001\002\000\004\026\355\001\002\000\004\035\340\001" +
    "\002\000\004\035\334\001\002\000\024\014\114\015\117" +
    "\016\105\017\107\025\110\035\115\036\116\050\102\051" +
    "\113\001\002\000\004\026\336\001\002\000\004\034\337" +
    "\001\002\000\056\005\uff9b\006\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\022\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\030\uff9b\032\uff9b\035\uff9b\036\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\045\uff9b\046\uff9b\052\uff9b\001\002\000\026" +
    "\005\316\014\342\015\344\016\105\017\107\025\110\035" +
    "\343\036\116\050\102\051\113\001\002\000\004\026\353" +
    "\001\002\000\026\014\114\015\117\016\105\017\107\025" +
    "\110\026\uffb6\035\115\036\116\050\102\051\113\001\002" +
    "\000\030\013\320\014\114\015\117\016\105\017\107\025" +
    "\110\026\uffad\035\115\036\116\050\102\051\113\001\002" +
    "\000\026\014\114\015\117\016\105\017\107\025\110\026" +
    "\uffb4\035\115\036\116\050\102\051\113\001\002\000\030" +
    "\014\114\015\117\016\105\017\346\025\110\026\141\034" +
    "\143\035\115\036\116\050\102\051\113\001\002\000\026" +
    "\014\114\015\117\016\105\017\107\025\110\026\uffb5\035" +
    "\115\036\116\050\102\051\113\001\002\000\030\014\114" +
    "\015\117\016\105\017\107\025\110\026\uffa8\034\236\035" +
    "\115\036\116\050\102\051\113\001\002\000\030\014\114" +
    "\015\117\016\105\017\351\025\110\026\141\034\143\035" +
    "\115\036\116\050\102\051\113\001\002\000\026\014\114" +
    "\015\117\016\105\017\107\025\110\026\uffb5\035\115\036" +
    "\116\050\102\051\113\001\002\000\030\014\114\015\117" +
    "\016\105\017\107\025\110\026\uffa8\034\162\035\115\036" +
    "\116\050\102\051\113\001\002\000\004\034\354\001\002" +
    "\000\056\005\uff9f\006\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f" +
    "\030\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042" +
    "\uff9f\045\uff9f\046\uff9f\052\uff9f\001\002\000\024\014\114" +
    "\015\117\016\105\017\107\025\110\035\115\036\116\050" +
    "\102\051\113\001\002\000\004\034\357\001\002\000\056" +
    "\005\uff9e\006\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\030\uff9e" +
    "\032\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\045" +
    "\uff9e\046\uff9e\052\uff9e\001\002\000\004\036\366\001\002" +
    "\000\010\025\251\035\363\036\362\001\002\000\024\014" +
    "\114\015\117\016\105\017\107\025\110\035\115\036\116" +
    "\050\102\051\113\001\002\000\024\014\114\015\117\016" +
    "\105\017\107\025\110\035\115\036\116\050\102\051\113" +
    "\001\002\000\004\034\365\001\002\000\056\005\uffa5\006" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\022\uffa5\023\uffa5\025\uffa5\026\uffa5\030\uffa5\032\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5\045\uffa5\046\uffa5" +
    "\052\uffa5\001\002\000\024\014\114\015\117\016\105\017" +
    "\107\025\110\035\115\036\116\050\102\051\113\001\002" +
    "\000\004\034\370\001\002\000\056\005\uffa4\006\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\022\uffa4" +
    "\023\uffa4\025\uffa4\026\uffa4\030\uffa4\032\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\041\uffa4\042\uffa4\045\uffa4\046\uffa4\052\uffa4" +
    "\001\002\000\026\005\316\014\342\015\344\016\105\017" +
    "\107\025\110\035\343\036\116\050\102\051\113\001\002" +
    "\000\004\035\373\001\002\000\024\014\114\015\117\016" +
    "\105\017\107\025\110\035\115\036\116\050\102\051\113" +
    "\001\002\000\024\014\114\015\117\016\105\017\107\025" +
    "\110\035\115\036\116\050\102\051\113\001\002\000\004" +
    "\034\376\001\002\000\056\005\uffa1\006\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\022\uffa1\023\uffa1" +
    "\025\uffa1\026\uffa1\030\uffa1\032\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\052\uffa1\001\002" +
    "\000\026\014\114\015\117\016\105\017\107\025\110\034" +
    "\u010f\035\115\036\116\050\102\051\113\001\002\000\004" +
    "\034\u010e\001\002\000\006\017\u0108\034\154\001\002\000" +
    "\004\015\u0105\001\002\000\004\034\u0104\001\002\000\056" +
    "\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\030\uffd4" +
    "\032\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\045" +
    "\uffd4\046\uffd4\052\uffd4\001\002\000\004\036\u0106\001\002" +
    "\000\004\034\u0107\001\002\000\056\005\uffcf\006\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\022\uffcf" +
    "\023\uffcf\025\uffcf\026\uffcf\030\uffcf\032\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf\052\uffcf" +
    "\001\002\000\004\035\u0109\001\002\000\004\025\u010a\001" +
    "\002\000\004\035\u010b\001\002\000\004\026\u010c\001\002" +
    "\000\004\034\u010d\001\002\000\056\005\uffcd\006\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\022\uffcd" +
    "\023\uffcd\025\uffcd\026\uffcd\030\uffcd\032\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\052\uffcd" +
    "\001\002\000\056\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\022\uffd2\023\uffd2\025\uffd2" +
    "\026\uffd2\030\uffd2\032\uffd2\035\uffd2\036\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\045\uffd2\046\uffd2\052\uffd2\001\002\000\056" +
    "\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\030\uffd8" +
    "\032\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\045" +
    "\uffd8\046\uffd8\052\uffd8\001\002\000\004\043\u0111\001\002" +
    "\000\004\040\u0112\001\002\000\004\035\u0113\001\002\000" +
    "\004\026\u0114\001\002\000\004\034\u0115\001\002\000\056" +
    "\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\030\uffcc" +
    "\032\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\045" +
    "\uffcc\046\uffcc\052\uffcc\001\002\000\020\005\244\013\064" +
    "\022\050\023\061\034\u0118\035\u0119\046\245\001\002\000" +
    "\056\005\uffda\006\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\022\uffda\023\uffda\025\uffda\026\uffda\030" +
    "\uffda\032\uffda\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda" +
    "\045\uffda\046\uffda\052\uffda\001\002\000\056\005\uffdb\006" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\022\uffdb\023\uffdb\025\uffdb\026\uffdb\030\uffdb\032\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb" +
    "\052\uffdb\001\002\000\016\005\244\013\064\022\050\023" +
    "\061\035\u0119\046\245\001\002\000\004\026\uff92\001\002" +
    "\000\004\040\243\001\002\000\056\005\uffa3\006\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\022\uffa3" +
    "\023\uffa3\025\uffa3\026\uffa3\030\uffa3\032\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\041\uffa3\042\uffa3\045\uffa3\046\uffa3\052\uffa3" +
    "\001\002\000\060\005\uff8b\006\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\022\uff8b\023\uff8b\025\uff8b" +
    "\026\uff8b\030\uff8b\032\uff8b\033\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\041\uff8b\042\uff8b\045\uff8b\046\uff8b\052\uff8b\001\002" +
    "\000\030\014\114\015\117\016\105\017\107\025\237\026" +
    "\uffad\035\115\036\116\040\243\050\102\051\113\001\002" +
    "\000\004\035\u0120\001\002\000\010\025\u0121\026\uff94\040" +
    "\u0122\001\002\000\012\005\u011f\026\042\035\012\041\027" +
    "\001\002\000\004\005\u0124\001\002\000\004\026\uff93\001" +
    "\002\000\004\035\u0125\001\002\000\006\026\uff94\040\u0122" +
    "\001\002\000\060\005\uff89\006\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\022\uff89\023\uff89\025\uff89" +
    "\026\uff89\030\uff89\032\uff89\033\uff89\035\uff89\036\uff89\037" +
    "\uff89\041\uff89\042\uff89\045\uff89\046\uff89\052\uff89\001\002" +
    "\000\052\005\030\006\025\010\051\011\037\012\044\013" +
    "\064\014\063\015\060\022\050\023\061\025\043\026\042" +
    "\032\035\035\057\036\062\037\040\041\027\045\046\046" +
    "\033\052\034\001\002\000\056\005\ufff0\006\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\022\ufff0\023" +
    "\ufff0\025\ufff0\026\ufff0\030\ufff0\032\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0\052\ufff0\001" +
    "\002\000\056\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\022\uffe0\023\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0\041\uffe0" +
    "\042\uffe0\045\uffe0\046\uffe0\052\uffe0\001\002\000\056\005" +
    "\uffea\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\022\uffea\023\uffea\025\uffea\026\uffea\030\uffea\032" +
    "\uffea\035\uffea\036\uffea\037\uffea\041\uffea\042\uffea\045\uffea" +
    "\046\uffea\052\uffea\001\002\000\056\005\uffec\006\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\030\uffec\032\uffec\035\uffec\036" +
    "\uffec\037\uffec\041\uffec\042\uffec\045\uffec\046\uffec\052\uffec" +
    "\001\002\000\056\005\ufff2\006\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\026\ufff2\030\ufff2\032\ufff2\035\ufff2\036\ufff2\037\ufff2\041" +
    "\ufff2\042\ufff2\045\ufff2\046\ufff2\052\ufff2\001\002\000\056" +
    "\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\032\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8\045" +
    "\uffe8\046\uffe8\052\uffe8\001\002\000\056\005\uffdd\006\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\022" +
    "\uffdd\023\uffdd\025\uffdd\026\uffdd\030\uffdd\032\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\041\uffdd\042\uffdd\045\uffdd\046\uffdd\052" +
    "\uffdd\001\002\000\056\005\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\022\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\030\ufff4\032\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\041\ufff4\042\ufff4\045\ufff4\046\ufff4\052\ufff4\001\002\000" +
    "\056\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4" +
    "\045\uffe4\046\uffe4\052\uffe4\001\002\000\056\005\uffde\006" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\022\uffde\023\uffde\025\uffde\026\uffde\030\uffde\032\uffde\035" +
    "\uffde\036\uffde\037\uffde\041\uffde\042\uffde\045\uffde\046\uffde" +
    "\052\uffde\001\002\000\056\005\uffee\006\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\022\uffee\023\uffee" +
    "\025\uffee\026\uffee\030\uffee\032\uffee\035\uffee\036\uffee\037" +
    "\uffee\041\uffee\042\uffee\045\uffee\046\uffee\052\uffee\001\002" +
    "\000\056\005\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\030\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\042" +
    "\uffe6\045\uffe6\046\uffe6\052\uffe6\001\002\000\056\005\uffe2" +
    "\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2\045\uffe2\046" +
    "\uffe2\052\uffe2\001\002\000\052\005\030\006\025\010\051" +
    "\011\037\012\044\013\064\014\063\015\060\022\050\023" +
    "\061\025\043\026\042\032\035\035\057\036\062\037\040" +
    "\041\027\045\046\046\033\052\034\001\002\000\052\005" +
    "\030\006\025\010\051\011\037\012\044\013\064\014\063" +
    "\015\060\022\050\023\061\025\043\026\042\030\u0137\032" +
    "\035\035\057\036\062\037\040\041\027\045\046\046\033" +
    "\001\002\000\004\011\u0138\001\002\000\004\025\u0139\001" +
    "\002\000\012\004\u013b\024\u013d\035\u013e\036\u013a\001\002" +
    "\000\006\026\uffc9\034\uffc9\001\002\000\006\004\u014b\035" +
    "\u014c\001\002\000\004\026\u0149\001\002\000\006\026\uffca" +
    "\034\uffca\001\002\000\014\015\u0141\021\u0140\026\uffc8\034" +
    "\uffc8\047\u013f\001\002\000\004\036\u0146\001\002\000\012" +
    "\004\u013b\024\u013d\035\u013e\036\u013a\001\002\000\004\036" +
    "\u0142\001\002\000\004\021\u0143\001\002\000\004\036\u0144" +
    "\001\002\000\006\026\uffc5\034\uffc5\001\002\000\006\026" +
    "\uffc3\034\uffc3\001\002\000\004\021\u0147\001\002\000\004" +
    "\036\u0148\001\002\000\006\026\uffc4\034\uffc4\001\002\000" +
    "\004\034\u014a\001\002\000\056\005\uffc0\006\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\022\uffc0\023" +
    "\uffc0\025\uffc0\026\uffc0\030\uffc0\032\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\052\uffc0\001" +
    "\002\000\006\026\uffc7\034\uffc7\001\002\000\004\004\u014d" +
    "\001\002\000\006\026\uffc6\034\uffc6\001\002\000\004\034" +
    "\u010f\001\002\000\012\035\u0152\036\u0150\043\u0154\044\u0151" +
    "\001\002\000\010\014\u0164\026\uff75\040\u0163\001\002\000" +
    "\010\014\u0160\026\uff74\040\u015f\001\002\000\010\014\u015c" +
    "\026\uff76\040\u015b\001\002\000\004\026\u0159\001\002\000" +
    "\010\014\u0156\026\uff77\040\u0155\001\002\000\012\035\u0152" +
    "\036\u0150\043\u0154\044\u0151\001\002\000\012\035\u0152\036" +
    "\u0150\043\u0154\044\u0151\001\002\000\004\026\uff73\001\002" +
    "\000\004\026\uff6f\001\002\000\004\034\u015a\001\002\000" +
    "\056\005\uff6b\006\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\022\uff6b\023\uff6b\025\uff6b\026\uff6b\030" +
    "\uff6b\032\uff6b\035\uff6b\036\uff6b\037\uff6b\041\uff6b\042\uff6b" +
    "\045\uff6b\046\uff6b\052\uff6b\001\002\000\012\035\u0152\036" +
    "\u0150\043\u0154\044\u0151\001\002\000\012\035\u0152\036\u0150" +
    "\043\u0154\044\u0151\001\002\000\004\026\uff72\001\002\000" +
    "\004\026\uff6e\001\002\000\012\035\u0152\036\u0150\043\u0154" +
    "\044\u0151\001\002\000\012\035\u0152\036\u0150\043\u0154\044" +
    "\u0151\001\002\000\004\026\uff70\001\002\000\004\026\uff6c" +
    "\001\002\000\012\035\u0152\036\u0150\043\u0154\044\u0151\001" +
    "\002\000\012\035\u0152\036\u0150\043\u0154\044\u0151\001\002" +
    "\000\004\026\uff71\001\002\000\004\026\uff6d\001\002\000" +
    "\006\005\u0169\035\u016a\001\002\000\004\026\u017e\001\002" +
    "\000\004\035\u0177\001\002\000\004\013\u016b\001\002\000" +
    "\004\036\u016c\001\002\000\004\034\u016d\001\002\000\012" +
    "\004\u013b\024\u013d\035\u013e\036\u013a\001\002\000\004\034" +
    "\u016f\001\002\000\010\022\u0170\023\u0173\035\u0172\001\002" +
    "\000\004\036\u0176\001\002\000\004\026\uffbd\001\002\000" +
    "\010\022\u0170\023\u0173\035\u0172\001\002\000\006\026\uffba" +
    "\035\u0174\001\002\000\004\026\uffb9\001\002\000\004\026" +
    "\uffbc\001\002\000\004\026\uffbb\001\002\000\004\013\u0178" +
    "\001\002\000\004\036\u0179\001\002\000\004\034\u017a\001" +
    "\002\000\012\004\u013b\024\u013d\035\u013e\036\u013a\001\002" +
    "\000\004\034\u017c\001\002\000\010\022\u0170\023\u0173\035" +
    "\u0172\001\002\000\004\026\uffbe\001\002\000\004\027\u017f" +
    "\001\002\000\052\005\030\006\025\010\051\011\037\012" +
    "\044\013\064\014\063\015\060\022\050\023\061\025\043" +
    "\026\042\032\035\035\057\036\062\037\040\041\027\045" +
    "\046\046\033\052\034\001\002\000\052\005\030\006\025" +
    "\010\051\011\037\012\044\013\064\014\063\015\060\022" +
    "\050\023\061\025\043\026\042\030\u0181\032\035\035\057" +
    "\036\062\037\040\041\027\045\046\046\033\001\002\000" +
    "\056\005\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\030" +
    "\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\045\uffbf\046\uffbf\052\uffbf\001\002\000\060\005\uff88\006" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\022\uff88\023\uff88\025\uff88\026\uff88\030\uff88\032\uff88\033" +
    "\uff88\035\uff88\036\uff88\037\uff88\041\uff88\042\uff88\045\uff88" +
    "\046\uff88\052\uff88\001\002\000\004\036\u0184\001\002\000" +
    "\004\026\u0185\001\002\000\004\034\u0186\001\002\000\056" +
    "\005\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8\030\uffb8" +
    "\032\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\045" +
    "\uffb8\046\uffb8\052\uffb8\001\002\000\012\004\u013b\024\u013d" +
    "\035\u013e\036\u013a\001\002\000\004\026\u0189\001\002\000" +
    "\004\027\u018a\001\002\000\052\005\030\006\025\010\051" +
    "\011\037\012\044\013\064\014\063\015\060\022\050\023" +
    "\061\025\043\026\042\032\035\035\057\036\062\037\040" +
    "\041\027\045\046\046\033\052\034\001\002\000\052\005" +
    "\030\006\025\010\051\011\037\012\044\013\064\014\063" +
    "\015\060\022\050\023\061\025\043\026\042\030\u018c\032" +
    "\035\035\057\036\062\037\040\041\027\045\046\046\033" +
    "\001\002\000\056\005\uffc1\006\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\022\uffc1\023\uffc1\025\uffc1" +
    "\026\uffc1\030\uffc1\032\uffc1\035\uffc1\036\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\045\uffc1\046\uffc1\052\uffc1\001\002\000\056" +
    "\005\uff5b\006\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\022\uff5b\023\uff5b\025\uff5b\026\uff5b\030\uff5b" +
    "\032\uff5b\035\uff5b\036\uff5b\037\uff5b\041\uff5b\042\uff5b\045" +
    "\uff5b\046\uff5b\052\uff5b\001\002\000\004\032\u0194\001\002" +
    "\000\004\027\u0190\001\002\000\014\035\176\036\172\040" +
    "\175\043\177\044\173\001\002\000\004\030\u0192\001\002" +
    "\000\004\034\u0193\001\002\000\056\005\uff59\006\uff59\010" +
    "\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59\022\uff59" +
    "\023\uff59\025\uff59\026\uff59\030\uff59\032\uff59\035\uff59\036" +
    "\uff59\037\uff59\041\uff59\042\uff59\045\uff59\046\uff59\052\uff59" +
    "\001\002\000\006\013\u0196\034\u0195\001\002\000\056\005" +
    "\uff57\006\uff57\010\uff57\011\uff57\012\uff57\013\uff57\014\uff57" +
    "\015\uff57\022\uff57\023\uff57\025\uff57\026\uff57\030\uff57\032" +
    "\uff57\035\uff57\036\uff57\037\uff57\041\uff57\042\uff57\045\uff57" +
    "\046\uff57\052\uff57\001\002\000\004\027\214\001\002\000" +
    "\004\034\u0198\001\002\000\056\005\uff55\006\uff55\010\uff55" +
    "\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\022\uff55\023" +
    "\uff55\025\uff55\026\uff55\030\uff55\032\uff55\035\uff55\036\uff55" +
    "\037\uff55\041\uff55\042\uff55\045\uff55\046\uff55\052\uff55\001" +
    "\002\000\056\005\uff52\006\uff52\010\uff52\011\uff52\012\uff52" +
    "\013\uff52\014\uff52\015\uff52\022\uff52\023\uff52\025\uff52\026" +
    "\uff52\030\uff52\032\uff52\035\uff52\036\uff52\037\uff52\041\uff52" +
    "\042\uff52\045\uff52\046\uff52\052\uff52\001\002\000\004\043" +
    "\u019b\001\002\000\004\040\u019c\001\002\000\006\020\273" +
    "\035\u0113\001\002\000\004\035\u019e\001\002\000\004\034" +
    "\u019f\001\002\000\004\030\u01a0\001\002\000\014\002\uff8c" +
    "\005\uff8c\026\uff8c\033\uff8c\041\uff8c\001\002\000\004\032" +
    "\u01ab\001\002\000\030\005\244\013\u01a4\022\050\023\061" +
    "\025\u0121\026\uff94\031\u01a3\034\u0118\035\u0119\040\u0122\046" +
    "\245\001\002\000\010\005\u01a9\032\035\036\u01a7\001\002" +
    "\000\026\005\310\014\063\015\060\024\071\025\327\035" +
    "\u01a5\036\u01a6\043\073\044\070\046\265\001\002\000\032" +
    "\013\361\014\114\015\117\016\105\017\107\022\360\025" +
    "\110\034\075\035\115\036\116\050\102\051\113\001\002" +
    "\000\026\014\114\015\117\016\105\017\107\025\110\034" +
    "\100\035\115\036\116\050\102\051\113\001\002\000\004" +
    "\032\163\001\002\000\056\005\uff53\006\uff53\010\uff53\011" +
    "\uff53\012\uff53\013\uff53\014\uff53\015\uff53\022\uff53\023\uff53" +
    "\025\uff53\026\uff53\030\uff53\032\uff53\035\uff53\036\uff53\037" +
    "\uff53\041\uff53\042\uff53\045\uff53\046\uff53\052\uff53\001\002" +
    "\000\006\031\u01a1\035\u01aa\001\002\000\004\031\u01a3\001" +
    "\002\000\004\035\u01ac\001\002\000\006\013\u01ae\034\u01ad" +
    "\001\002\000\056\005\uff5a\006\uff5a\010\uff5a\011\uff5a\012" +
    "\uff5a\013\uff5a\014\uff5a\015\uff5a\022\uff5a\023\uff5a\025\uff5a" +
    "\026\uff5a\030\uff5a\032\uff5a\035\uff5a\036\uff5a\037\uff5a\041" +
    "\uff5a\042\uff5a\045\uff5a\046\uff5a\052\uff5a\001\002\000\004" +
    "\027\u01af\001\002\000\014\035\176\036\172\040\175\043" +
    "\177\044\173\001\002\000\004\030\u01b1\001\002\000\004" +
    "\034\u01b2\001\002\000\056\005\uff58\006\uff58\010\uff58\011" +
    "\uff58\012\uff58\013\uff58\014\uff58\015\uff58\022\uff58\023\uff58" +
    "\025\uff58\026\uff58\030\uff58\032\uff58\035\uff58\036\uff58\037" +
    "\uff58\041\uff58\042\uff58\045\uff58\046\uff58\052\uff58\001\002" +
    "\000\004\025\u01b4\001\002\000\012\005\u011f\026\042\035" +
    "\012\041\027\001\002\000\060\005\uff8a\006\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\022\uff8a\023" +
    "\uff8a\025\uff8a\026\uff8a\030\uff8a\032\uff8a\033\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\041\uff8a\042\uff8a\045\uff8a\046\uff8a\052" +
    "\uff8a\001\002\000\012\004\u013b\024\u013d\035\u013e\036\u013a" +
    "\001\002\000\004\026\u01b8\001\002\000\004\027\u01b9\001" +
    "\002\000\052\005\030\006\025\010\051\011\037\012\044" +
    "\013\064\014\063\015\060\022\050\023\061\025\043\026" +
    "\042\032\035\035\057\036\062\037\040\041\027\045\046" +
    "\046\033\052\034\001\002\000\052\005\030\006\025\010" +
    "\051\011\037\012\044\013\064\014\063\015\060\022\050" +
    "\023\061\025\043\026\042\030\u01bb\032\035\035\057\036" +
    "\062\037\040\041\027\045\046\046\033\001\002\000\060" +
    "\005\uffcb\006\uffcb\007\u01bc\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\045\uffcb\046\uffcb\052\uffcb\001\002\000\004\027\u01bd" +
    "\001\002\000\052\005\030\006\025\010\051\011\037\012" +
    "\044\013\064\014\063\015\060\022\050\023\061\025\043" +
    "\026\042\032\035\035\057\036\062\037\040\041\027\045" +
    "\046\046\033\052\034\001\002\000\052\005\030\006\025" +
    "\010\051\011\037\012\044\013\064\014\063\015\060\022" +
    "\050\023\061\025\043\026\042\030\u01bf\032\035\035\057" +
    "\036\062\037\040\041\027\045\046\046\033\001\002\000" +
    "\056\005\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2\030" +
    "\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\045\uffc2\046\uffc2\052\uffc2\001\002\000\004\034\022\001" +
    "\002\000\004\025\u01c2\001\002\000\012\005\u01c4\026\005" +
    "\035\012\041\015\001\002\000\014\002\uff91\005\uff91\026" +
    "\uff91\033\uff91\041\uff91\001\002\000\004\035\u01c5\001\002" +
    "\000\010\025\u01c6\026\uff94\040\u0122\001\002\000\012\005" +
    "\u01c4\026\005\035\012\041\015\001\002\000\014\002\uff8e" +
    "\005\uff8e\026\uff8e\033\uff8e\041\uff8e\001\002\000\012\002" +
    "\ufff7\005\u01d1\026\u01d2\041\u01ce\001\002\000\054\005\030" +
    "\006\025\010\051\011\037\012\044\013\064\014\063\015" +
    "\060\022\050\023\061\025\043\026\042\030\u01e1\032\035" +
    "\035\057\036\062\037\040\041\027\042\u01e2\045\046\046" +
    "\033\001\002\000\004\036\u01cb\001\002\000\004\034\u01cc" +
    "\001\002\000\004\030\u01cd\001\002\000\012\002\ufffa\005" +
    "\u01d1\026\u01d2\041\u01ce\001\002\000\004\035\u01df\001\002" +
    "\000\004\026\u01de\001\002\000\012\002\ufff9\005\u01d1\026" +
    "\u01d2\041\u01ce\001\002\000\004\035\u01db\001\002\000\004" +
    "\027\u01d3\001\002\000\054\005\030\006\025\010\051\011" +
    "\037\012\044\013\064\014\063\015\060\022\050\023\061" +
    "\025\043\026\042\030\u01d4\032\035\035\057\036\062\037" +
    "\040\041\027\045\046\046\033\052\034\001\002\000\014" +
    "\002\uff90\005\uff90\026\uff90\033\uff90\041\uff90\001\002\000" +
    "\054\005\030\006\025\010\051\011\037\012\044\013\064" +
    "\014\063\015\060\022\050\023\061\025\043\026\042\030" +
    "\u01d6\032\035\035\057\036\062\037\040\041\027\042\u01d7" +
    "\045\046\046\033\001\002\000\014\002\uff8f\005\uff8f\026" +
    "\uff8f\033\uff8f\041\uff8f\001\002\000\004\035\u01d8\001\002" +
    "\000\004\034\u01d9\001\002\000\004\030\u01da\001\002\000" +
    "\014\002\uff8d\005\uff8d\026\uff8d\033\uff8d\041\uff8d\001\002" +
    "\000\010\025\u01dc\026\uff94\040\u0122\001\002\000\010\005" +
    "\u01d1\026\u01d2\041\u01ce\001\002\000\014\002\uff84\005\uff84" +
    "\026\uff84\033\uff84\041\uff84\001\002\000\004\027\021\001" +
    "\002\000\004\025\u01e0\001\002\000\010\005\u01d1\026\u01d2" +
    "\041\u01ce\001\002\000\012\002\ufff8\005\u01d1\026\u01d2\041" +
    "\u01ce\001\002\000\004\036\u01e3\001\002\000\004\034\u01e4" +
    "\001\002\000\004\030\u01e5\001\002\000\004\002\ufffb\001" +
    "\002\000\012\002\ufff5\005\u01d1\026\u01d2\041\u01ce\001\002" +
    "\000\012\002\ufff6\005\u01d1\026\u01d2\041\u01ce\001\002\000" +
    "\004\025\u01e9\001\002\000\004\026\u01ea\001\002\000\016" +
    "\005\010\026\005\027\014\033\011\035\012\041\015\001" +
    "\002\000\004\002\ufffe\001\002\000\012\005\u011f\026\042" +
    "\035\012\041\027\001\002\000\004\026\u01ee\001\002\000" +
    "\016\005\010\026\005\027\014\033\011\035\012\041\015" +
    "\001\002\000\004\002\uffff\001\002\000\004\025\u01f1\001" +
    "\002\000\004\026\u01f2\001\002\000\016\005\010\026\005" +
    "\027\014\033\011\035\012\041\015\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\025\u01fb" +
    "\001\002\000\006\033\u01f7\035\u01db\001\002\000\004\025" +
    "\u01f8\001\002\000\004\026\u01f9\001\002\000\016\005\010" +
    "\026\005\027\014\033\011\035\012\041\015\001\002\000" +
    "\004\002\ufffc\001\002\000\004\026\u01fc\001\002\000\016" +
    "\005\010\026\005\027\014\033\011\035\012\041\015\001" +
    "\002\000\004\002\ufffd\001\002\000\004\034\u01ff\001\002" +
    "\000\060\005\uff87\006\uff87\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\022\uff87\023\uff87\025\uff87\026\uff87" +
    "\030\uff87\032\uff87\033\uff87\035\uff87\036\uff87\037\uff87\041" +
    "\uff87\042\uff87\045\uff87\046\uff87\052\uff87\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\016\002\006\020\015\021\016\022\005\023" +
    "\012\024\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u01ce\021\u01dc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\u01c8\004\051\006\040\007\022\010" +
    "\055\011\035\012\031\015\044\016\064\020\023\023\053" +
    "\024\003\026\065\030\025\032\054\033\052\037\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\030\004\051\006\040\007" +
    "\022\010\055\011\035\012\031\015\044\016\064\020\023" +
    "\023\053\024\003\026\065\030\025\032\054\033\052\037" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\311\001\001\000\040\004\u012e\006\u012b" +
    "\007\u0127\010\u0131\011\u012a\012\u0129\015\u012c\016\u0132\020" +
    "\023\023\u012f\024\003\026\u0133\030\u0128\032\u0130\033\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\u0126\004\051\006\040\007\022\010" +
    "\055\011\035\012\031\015\044\016\064\020\023\023\053" +
    "\024\003\026\065\030\025\032\054\033\052\037\046\001" +
    "\001\000\002\001\001\000\014\004\237\017\240\034\111" +
    "\035\103\036\110\001\001\000\004\034\226\001\001\000" +
    "\002\001\001\000\012\017\163\034\111\035\103\036\110" +
    "\001\001\000\004\034\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\105\034\111\035\103\036\110" +
    "\001\001\000\012\017\152\034\111\035\103\036\110\001" +
    "\001\000\012\017\151\034\111\035\103\036\110\001\001" +
    "\000\002\001\001\000\012\017\146\034\111\035\103\036" +
    "\110\001\001\000\012\017\144\034\111\035\103\036\110" +
    "\001\001\000\012\017\143\034\111\035\103\036\110\001" +
    "\001\000\012\017\141\034\111\035\103\036\110\001\001" +
    "\000\002\001\001\000\012\017\122\034\111\035\103\036" +
    "\110\001\001\000\012\017\121\034\111\035\103\036\110" +
    "\001\001\000\012\017\120\034\111\035\103\036\110\001" +
    "\001\000\012\017\117\034\111\035\103\036\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\155\034\111\035\103\036\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\173\001\001\000\004" +
    "\025\205\001\001\000\004\025\204\001\001\000\002\001" +
    "\001\000\004\025\201\001\001\000\004\025\200\001\001" +
    "\000\004\025\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\212\001\001" +
    "\000\002\001\001\000\006\025\215\027\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\230\034\111\035" +
    "\103\036\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\144\020\023\023\u011c" +
    "\024\003\034\111\035\103\036\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\237\017\121\034\111" +
    "\035\103\036\110\001\001\000\004\024\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u0100\001\001" +
    "\000\002\001\001\000\012\017\363\034\111\035\103\036" +
    "\110\001\001\000\006\016\310\033\052\001\001\000\004" +
    "\032\256\001\001\000\012\017\253\034\111\035\103\036" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\163\034\111\035\103\036\110\001\001\000\002\001\001" +
    "\000\004\034\226\001\001\000\012\017\240\034\111\035" +
    "\103\036\110\001\001\000\004\033\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\226\001\001\000" +
    "\004\034\100\001\001\000\002\001\001\000\004\033\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\323\001\001\000\002" +
    "\001\001\000\006\016\327\033\052\001\001\000\012\017" +
    "\163\034\111\035\103\036\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\334\034\111\035\103\036\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\340\033\323\034\111\035\103\036\110" +
    "\001\001\000\002\001\001\000\012\017\122\034\347\035" +
    "\103\036\110\001\001\000\012\017\121\034\111\035\103" +
    "\036\110\001\001\000\012\017\117\034\344\035\103\036" +
    "\110\001\001\000\012\017\141\034\111\035\103\036\110" +
    "\001\001\000\012\017\146\034\111\035\103\036\346\001" +
    "\001\000\012\017\143\034\111\035\103\036\110\001\001" +
    "\000\012\017\141\034\111\035\103\036\110\001\001\000" +
    "\012\017\146\034\111\035\103\036\351\001\001\000\012" +
    "\017\143\034\111\035\103\036\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\355\034\111\035\103" +
    "\036\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\363\034\111" +
    "\035\103\036\110\001\001\000\012\017\253\034\111\035" +
    "\103\036\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\366\034\111\035\103\036\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\230\033\323" +
    "\034\111\035\103\036\110\001\001\000\002\001\001\000" +
    "\012\017\340\034\111\035\103\036\110\001\001\000\012" +
    "\017\374\034\111\035\103\036\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\366\034\111\035\103" +
    "\036\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\121\034\111\035\103\036\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\023\023\u0125\024\003" +
    "\001\001\000\004\020\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\u012e\006\u012b\007\u0127\010\u0131\011\u012a\012\u0129\015" +
    "\u012c\016\u0132\020\023\023\u012f\024\003\026\u0133\030\u0128" +
    "\032\u0130\033\052\037\u012d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\u0135\004" +
    "\051\006\040\007\022\010\055\011\035\012\031\015\044" +
    "\016\064\020\023\023\053\024\003\026\065\030\025\032" +
    "\054\033\052\037\046\001\001\000\040\004\u012e\006\u012b" +
    "\007\u0127\010\u0131\011\u012a\012\u0129\015\u012c\016\u0132\020" +
    "\023\023\u012f\024\003\026\u0133\030\u0128\032\u0130\033\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0157\001\001\000\004\031\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u015d\001\001\000\004\031\u015c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u0161\001\001" +
    "\000\004\031\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u0165\001\001\000\004\031\u0164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u016d\001" +
    "\001\000\002\001\001\000\004\005\u0170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u017a\001\001\000\002\001\001\000\004" +
    "\005\u017c\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\u017f\004\051\006\040\007\022\010\055\011\035" +
    "\012\031\015\044\016\064\020\023\023\053\024\003\026" +
    "\065\030\025\032\054\033\052\037\046\001\001\000\040" +
    "\004\u012e\006\u012b\007\u0127\010\u0131\011\u012a\012\u0129\015" +
    "\u012c\016\u0132\020\023\023\u012f\024\003\026\u0133\030\u0128" +
    "\032\u0130\033\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\u018a\004\051\006\040" +
    "\007\022\010\055\011\035\012\031\015\044\016\064\020" +
    "\023\023\053\024\003\026\065\030\025\032\054\033\052" +
    "\037\046\001\001\000\040\004\u012e\006\u012b\007\u0127\010" +
    "\u0131\011\u012a\012\u0129\015\u012c\016\u0132\020\023\023\u012f" +
    "\024\003\026\u0133\030\u0128\032\u0130\033\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0190\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0196\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0116\001\001\000\004\026\u01a7\001\001\000" +
    "\006\016\327\033\052\001\001\000\012\017\240\034\111" +
    "\035\103\036\110\001\001\000\012\017\163\034\111\035" +
    "\103\036\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u01af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\023\023\u01b4" +
    "\024\003\001\001\000\002\001\001\000\004\013\u01b6\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\u01b9" +
    "\004\051\006\040\007\022\010\055\011\035\012\031\015" +
    "\044\016\064\020\023\023\053\024\003\026\065\030\025" +
    "\032\054\033\052\037\046\001\001\000\040\004\u012e\006" +
    "\u012b\007\u0127\010\u0131\011\u012a\012\u0129\015\u012c\016\u0132" +
    "\020\023\023\u012f\024\003\026\u0133\030\u0128\032\u0130\033" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\u01bd\004\051\006\040\007\022\010\055\011\035\012" +
    "\031\015\044\016\064\020\023\023\053\024\003\026\065" +
    "\030\025\032\054\033\052\037\046\001\001\000\040\004" +
    "\u012e\006\u012b\007\u0127\010\u0131\011\u012a\012\u0129\015\u012c" +
    "\016\u0132\020\023\023\u012f\024\003\026\u0133\030\u0128\032" +
    "\u0130\033\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\015\021\u01c2\023\u01b4\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\015\021\u01c6\023\u0125\024\003\001" +
    "\001\000\002\001\001\000\010\020\u01ce\021\016\022\u01e6" +
    "\001\001\000\040\004\u012e\006\u012b\007\u0127\010\u0131\011" +
    "\u012a\012\u0129\015\u012c\016\u0132\020\023\023\u012f\024\003" +
    "\026\u0133\030\u0128\032\u0130\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\u01ce" +
    "\021\016\022\u01cf\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u01ce\021\u01dc\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\u01d4\004\051\006\040\007" +
    "\022\010\055\011\035\012\031\015\044\016\064\020\023" +
    "\023\053\024\003\026\065\030\025\032\054\033\052\037" +
    "\046\001\001\000\002\001\001\000\040\004\u012e\006\u012b" +
    "\007\u0127\010\u0131\011\u012a\012\u0129\015\u012c\016\u0132\020" +
    "\023\023\u012f\024\003\026\u0133\030\u0128\032\u0130\033\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u01ce\021\u01c6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\u01ce\021\u01c2" +
    "\001\001\000\010\020\u01ce\021\016\022\u01e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u01ce\021\u01dc\001\001\000\006\020" +
    "\u01ce\021\u01dc\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\u01ea\020\015\021\016\022\005\023\012\024" +
    "\003\001\001\000\002\001\001\000\010\020\023\023\u011c" +
    "\024\003\001\001\000\002\001\001\000\016\002\u01ee\020" +
    "\015\021\016\022\005\023\012\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\u01f2\020\015\021\016\022\005\023\012\024\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\u01f9\020\015\021\016\022\005\023\012\024\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\u01fc" +
    "\020\015\021\016\022\005\023\012\024\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // BREAK ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BREAK",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION_ARREGLO ::= T_dato Identificador Corchete_a DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION_ARREGLO ::= Numero Corchete_c Corchete_a Numero Corchete_c Igual MATRIX P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION_ARREGLO ::= Corchete_c Corchete_a Corchete_c Igual MATRIX P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION_ARREGLO ::= Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION_ARREGLO ::= Corchete_c Corchete_a Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION_ARREGLO ::= T_dato Corchete_a Corchete_c Identificador Igual Llave_a VALORES Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION_ARREGLO ::= Corchete_c Igual Llave_a VALORES Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION_ARREGLO ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION_ARREGLO ::= Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION_ARREGLO ::= Numero Corchete_c Igual Llave_a VALORES Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION_ARREGLO ::= Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RAIZ ::= RAIZ Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RAIZ",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RAIZ ::= RAIZ P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RAIZ",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RAIZ ::= Raiz Parentesis_a MIXTA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RAIZ",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // POTENCIA ::= POTENCIA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // POTENCIA ::= Pow Parentesis_a Identificador Coma Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // POTENCIA ::= Pow Parentesis_a Numero Coma Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // POTENCIA ::= Pow Parentesis_a Identificador Coma Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // POTENCIA ::= Pow Parentesis_a Numero Coma Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INGRESAR ::= Ingresar Parentesis_a Cadena Coma Op_logico Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INGRESAR ::= Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INGRESAR ::= Parentesis_a Cadena Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INGRESAR ::= Identificador Igual Ingresar INGRESAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INGRESAR ::= T_dato Identificador Igual Ingresar INGRESAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IMPRIMIR ::= Imprimir Parentesis_a CONCATENACION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONCATENACION ::= Char Coma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONCATENACION ::= Numero Coma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONCATENACION ::= Identificador Coma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONCATENACION ::= Cadena Coma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONCATENACION ::= Char Suma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONCATENACION ::= Numero Suma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONCATENACION ::= Identificador Suma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONCATENACION ::= Cadena Suma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONCATENACION ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONCATENACION ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONCATENACION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MATRIX ::= Llave_a MATRIX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATRIX",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MATRIX ::= Llave_a VALORES Llave_c Coma MATRIX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATRIX",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MATRIX ::= Llave_a VALORES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATRIX",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALORES ::= Coma VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALORES ::= Identificador VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALORES ::= Char VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALORES ::= Cadena VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALORES ::= Numero VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALORES ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALORES ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALORES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNCIONES ::= FUNCIONES DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNCIONES ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LLAMAR_FUNCIONES ::= PARAMETROS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LLAMAR_FUNCIONES ::= PARAMETROS_SIN Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LLAMAR_FUNCIONES ::= Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMAR_FUNCIONES ::= T_dato Identificador Parentesis_a LLAMAR_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMAR_FUNCIONES ::= Void Identificador Parentesis_a LLAMAR_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LLAMAR_FUNCIONES ::= Identificador Parentesis_a LLAMAR_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION_FUNCION ::= PARAMETROS Parentesis_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION_FUNCION ::= Parentesis_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION_FUNCION ::= T_dato Identificador Parentesis_a DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION_FUNCION ::= Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION_FUNCION ::= Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION_FUNCION ::= Void Identificador Parentesis_a DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMETROS_SIN ::= Identificador Coma PARAMETROS_SIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_SIN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARENTESIS ::= Parentesis_a MIXTA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FORMULA_GENERAL ::= Resta RAIZ Division PARENTESIS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORMULA_GENERAL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FORMULA_GENERAL ::= Suma RAIZ Division PARENTESIS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORMULA_GENERAL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FORMULA_GENERAL ::= Identificador Igual Parentesis_a Resta Identificador FORMULA_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORMULA_GENERAL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FORMULA_GENERAL ::= T_dato FORMULA_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORMULA_GENERAL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION_OPERACION ::= FORMULA_GENERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION_OPERACION ::= Parentesis_a Suma Identificador MIXTA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION_OPERACION ::= Suma Identificador MIXTA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_OPERACION ::= Resta Identificador MIXTA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_OPERACION ::= Parentesis_a Numero Parentesis_c MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_OPERACION ::= Parentesis_a Resta Identificador MIXTA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_OPERACION ::= Identificador Igual Parentesis_a DECLARACION_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_OPERACION ::= Identificador Igual Parentesis_a Numero Parentesis_c MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION_OPERACION ::= Identificador Igual Identificador MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION_OPERACION ::= Identificador MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_OPERACION ::= Identificador Op_atribucion Numero MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_OPERACION ::= Identificador Igual Numero MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_OPERACION ::= Numero MIXTA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_OPERACION ::= T_dato Identificador Igual DECLARACION_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MIXTA ::= PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MIXTA ::= PARENTESIS MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MIXTA ::= RAIZ MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MIXTA ::= POTENCIA MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MIXTA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MIXTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MIXTA ::= Identificador MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MIXTA ::= Numero MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MIXTA ::= Division MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MIXTA ::= Multiplicacion MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MIXTA ::= Resta MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MIXTA ::= Suma MIXTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MIXTA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MIXTA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MIXTA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MIXTA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIXTA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_SENO ::= Math Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SENO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_FOR ::= Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Mod Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Resta Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Ingresar Parentesis_a Cadena Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Op_atribucion POTENCIA Division Identificador Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Op_atribucion Identificador Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Igual Char P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Op_atribucion Char P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Op_atribucion Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Identificador DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= INGRESAR SENTENCIA BREAK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA INGRESAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= LLAMAR_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA LLAMAR_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= DECLARACION_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA DECLARACION_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= DECLARACION_SENO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA DECLARACION_SENO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Llave_a SENTENCIA Llave_c FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Llave_a Llave_c FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Llave_a Return Numero P_coma Llave_c FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Llave_a Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= FUNCIONES T_dato Main Parentesis_a Parentesis_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= FUNCIONES Main Parentesis_a Parentesis_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= LLAMAR_FUNCIONES Main Parentesis_a Parentesis_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_dato Main Parentesis_a Parentesis_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

